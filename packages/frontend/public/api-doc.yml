openapi: 3.0.3
info:
  title: Nym API
  description: ''
  contact:
    email: dan@personaelabs.org
  version: '1'
servers:
  - url: /api/v1
    description: Local server
paths:
  /posts:
    get:
      description: Get posts
      operationId: getPosts
      parameters:
        - name: offset
          in: query
          required: false
          schema:
            type: number
        - name: limit
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
    post:
      description: Create a post
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: object
                  properties:
                    venue:
                      type: string
                    title:
                      type: string
                    body:
                      type: string
                    parentId:
                      type: string
                    groupRoot:
                      type: string
                    timestamp:
                      type: number
                      description: Unix timestamp
                attestation:
                  type: string
                  description: Unix timestamp
                attestationScheme:
                  type: string
                  enum:
                    - Nym
                    - EIP712
              required:
                - content
                - attestation
                - attestationScheme
      responses:
        '200':
          description: OK
  /posts/{postId}:
    get:
      description: Get a single post and all of its children
      operationId: getPost
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /posts/{postId}/fetchParents:
    get:
      description: Fetch all parent responses with the last descendant as post with {postId}
      operationId: getPost
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /posts/{postId}/upvote:
    post:
      description: Get a single post and all of its children
      operationId: upvotePost
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sig:
                  type: string
                groupRoot:
                  type: string
                timestamp:
                  type: number
                  description: Unix timestamp

              required:
                - sig
                - postId
                - groupRoot
                - timestamp
      responses:
        '200':
          description: OK
  /groups/latest:
    get:
      description: Get all members and their Merkle proof of the latest group
      operationId: getLatestGroup
      responses:
        '200':
          description: OK
        '400':
          description: Invalid set
  /users/{userId}/posts:
    get:
      description: Get posts of a user
      operationId: getUserPosts
      parameters:
        - name: userId
          in: path
          required: true
          description: Nym or Ethereum address
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            type: number
        - name: limit
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
  /users/{userId}/upvotes:
    get:
      description: Get upvotes of a user
      operationId: getUserUpvotes
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: offset
          in: query
          required: false
          schema:
            type: number
        - name: limit
          in: query
          required: false
          schema:
            type: number
      responses:
        '200':
          description: OK
